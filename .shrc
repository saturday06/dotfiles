# -*- coding: us-ascii-unix; mode: shell-script -*-

shrc_main() {
  if [ -n "$ZSH_VERSION" ]; then
    HISTFILE=~/.histfile
    HISTSIZE=50000
    SAVEHIST=50000
    LISTMAX=0
    #PROMPT="%n@%m%# "
    #PROMPT='%% '
    #PROMPT='%n%# '
    PROMPT='%# '
    RPROMPT='[%~]'

    #path=($path(N^W)) # ignore world-writable
    #path=($path(N^IW)) # ignore group-writable

    setopt append_history
    setopt appendhistory
    setopt auto_list
    setopt auto_menu
    setopt auto_param_slash
    setopt auto_pushd
    setopt autocd
    setopt extended_history
    setopt extendedglob
    setopt hist_ignore_dups
    setopt hist_reduce_blanks
    setopt list_types # show candidate's type
    setopt no_beep
    setopt nocaseglob
    setopt nomatch
    setopt notify
    setopt print_eight_bit
    setopt prompt_subst
    setopt pushd_ignore_dups
    setopt share_history
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info
    autoload -Uz compinit

    bindkey -e

    # redbullgokgok
    which git > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
      :
      #alias red=git;
      #red config --global alias.bull pull
    fi

    if [ "$TERM" = eterm-color ]; then
      bindkey -r "^[x"
    fi

    if [ "`uname -o 2> /dev/null`" = "Cygwin" ]; then
      shrc_compinit_u " $0: your os is Cygwin."
      is_cygwin=yes
    elif [ "`uname -s 2> /dev/null`" = "Interix" ]; then
      shrc_compinit_u " $0: your os is Interix."
    else
      compinit
    fi

    if [ vcs_info > /dev/null 2> /dev/null ]; then
      zstyle ':vcs_info:git:*' check-for-changes true
      zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
      zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
      zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
      zstyle ':vcs_info:*' actionformats '[%b|%a]'
      precmd_vcs_info() {
        LC_ALL=en_US.UTF-8 vcs_info
      }
      add-zsh-hook precmd precmd_vcs_info
      RPROMPT='${vcs_info_msg_0_}'$RPROMPT
    fi

    # RE: Case insensitive completion problems with cygwin
    # http://www.zsh.org/mla/users/2006/msg01116.html
    #zstyle ':completion:*' matcher-list 'm:{a-z}=3D{A-Z}'
    #zstyle ':completion:*:paths' accept-exact 'c:' 'b:' 'w:' 'r:' 'v:'
    #zstyle ':completion:*' fake-files '/:c' '/:b' '/:w' '/:r' '/:v'
    #zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
    zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
    zstyle ':completion:*:default' menu select=1
    if [ -f "${HOME}/.zshrc.local" ]; then
      source "${HOME}/.zshrc.local"
    fi

    rebasedir() (
      find $1 -type f -iregex ".+\\.\\(dll\\|exe\\)$" #| xargs rebase -v
    )

    rebaselocal() (
      rebasedir /usr/local
      rebasedir $HOME/.rbenv
    )
    
    if command_exists direnv; then
      eval "$(direnv hook zsh)"
    fi

  elif [ -n "$BASH_VERSION" ]; then
    export PS1='$ '

    # Chapter 2. Setting Up Cygwin
    # http://www.cygwin.com/cygwin-ug-net/setup-files.html
    shopt -s nocaseglob
    # Ignore case while completing
    #bind 'set completion-ignore-case on'
    #bind `echo set completion-ignore-case on`
    set completion-ignore-case on
    # Make Bash 8bit clean
    set meta-flag on
    set convert-meta off
    set output-meta on

    export HISTCONTROL=ignoredups:erasedups:ignorespace
    export HISTSIZE=10000

    # append history entries..
    shopt -s histappend

    # After each command, save and reload history
    export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
    if command_exists direnv; then
      eval "$(direnv hook bash)"
    fi

  else
    echo no bash/zsh
    interactive_mode=false
  fi

  echo interactive_mode=$interactive_mode

  shrc_add_git_config core.autocrlf false
  shrc_add_git_config core.quotepath false
  shrc_add_git_config core.precomposeunicode true
  shrc_add_git_config pull.ff only

  if [ "`uname -o 2> /dev/null`" = "Cygwin" ]; then
    # Cygwin
    #export CYGWIN="nodosfilewarning error_start=dumper codepage:utf8"
    export CYGWIN="nodosfilewarning error_start=dumper"
    #export LANG=en_US.UTF-8
    #export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/usr/lib/lapack
    shrc_set_home
    if [ -n "$APPDATA" ]; then
      appdata=`cygpath --unix "$APPDATA"`
      shrc_pathmunge $appdata/npm
    fi
    for p in "$ProgramW6432" "$PROGRAMFILES"; do
      shrc_pathmunge $p/nodejs
    done
    shrc_add_git_config core.filemode false
    for k in VBOX_INSTALL_PATH \
             PSModulePath \
             GTK_BASEPATH \
             VS120COMNTOOLS \
             VS110COMNTOOLS \
             VS90COMNTOOLS \
          ; do
      :
      #unset $k
    done
    tmp_path=$PATH
    filtered_path=
    while true; do
      head=`echo $tmp_path | sed 's/:.\+//'`
      tmp_path=`echo $tmp_path | sed 's/^[^:]*\(.*\)/\1/' | sed 's/^://'`
      if [ "$head" = "" ]; then
        export PATH="`echo $filtered_path | sed 's/^://'`"
        break
      fi
      match=false
      if echo $head | grep -i "^/cygdrive/" > /dev/null; then
        for r in "/microsoft sql server/" \
                 "/microsoft/web platform installer$" \
                 "/microsoft sdks/typescript/" \
                 "/windowspowershell/" \
                 "/gnupg/pub$" \
                 "/git/cmd$" \
                 "/nvidia corporation/physx/common" \
                 "/gtksharp/" \
                 "^/cygdrive/.*/ghc.*/bin$" \
                 "^/cygdrive/.*/cabal/bin$" \
                 "/mingw/bin$" \
                 ; do
          if echo $head | grep -i "$r" > /dev/null; then
            match=true
            break
          fi
        done
      fi
      if ! $match; then
        filtered_path="$filtered_path:$head"
      fi
    done
  elif [ "`uname -o 2> /dev/null`" = "Msys" ]; then
    # MSYS
    shrc_set_home
    shrc_add_git_config core.filemode false
  elif [ "`uname -s 2> /dev/null`" = "Interix" ]; then
    # Interix
    shrc_pathmunge /opt/gcc.4.2/bin
    if [ "$TERM" = "" ]; then
      export TERM=interix
    fi

    export LANG=C
    export LANGUAGE=C
    export LC_ALL=C

    user_tmp="`id -u 2> /dev/null`"
    if [ "$user_tmp" = "197108" ]; then
      # Administrator
      export PS1='# '
      shrc_pathmunge /usr/sbin
      shrc_pathmunge /usr/local/sbin
      if [ "$HOME" = "" -o "$HOME" = "/" ]; then
        rm -f $HISTFILE ~/.zcompdump
        mkdir -p /root
        export HOME=/root
        #export HOME=`winpath2unix $USERPROFILE`
      fi
    fi
    shrc_add_git_config core.filemode false
  elif [ "`uname -s 2> /dev/null`" = "Darwin" ]; then
    # OSX
    shrc_add_git_config core.precomposeunicode true
    defaults write com.apple.finder QuitMenuItem -bool yes
    eval $(/usr/libexec/path_helper -s) || true
    export HOMEBREW_NO_ANALYTICS=1
  elif [ "`uname -r | grep -e '-co-' 2> /dev/null`" != "" ]; then
    # coLinux
    export DISPLAY=10.0.2.2:0
  elif cat /proc/sys/kernel/osrelease | grep Microsoft > /dev/null 2>&1; then
    # WSL
    export DISPLAY=:0
    export GHCRTS="-V0 $GHCRTS"
  fi

  while [ "" = "" ]; do
    ls --color=auto --show-control-chars -F > /dev/null 2> /dev/null
    if [ ${?} -eq 0 ]; then
      alias ls="ls --color=auto --show-control-chars -F"
      break
    fi
    ls -G -F > /dev/null 2> /dev/null
    if [ ${?} -eq 0 ]; then
      alias ls="ls -G -F"
      break
    fi
    ls -F > /dev/null 2> /dev/null
    if [ ${?} -eq 0 ]; then
      alias ls="ls -F"
      break
    fi
    break
  done

  if command_exists emacs; then
    export EDITOR="`which emacs`"
    #emacs() (
    #  $EDITOR $*
      #emacsclient --alternate-editor="$EDITOR" $*
      #emacsclient --create-frame --no-wait --alternate-editor="$EDITOR" $*
      #alias emacs="emacsclient --create-frame --alternate-editor='$EDITOR'"
    #)
  else
    for editor in nano vim vi; do
      which ${editor} > /dev/null 2> /dev/null
      if [ ${?} -eq 0 ]; then
        export EDITOR=${editor}
        break
      fi
    done
  fi

  for dropbox in dropbox ~/.dropbox-dist/dropbox; do
    if command_exists $dropbox; then
      shrc_nohup $dropbox start
      break
    fi
  done

  # if [ "$DISPLAY" != "" ]; then
  #   which xrdb > /dev/null 2> /dev/null
  #   if [ $? -eq 0 ]; then
  #     if [ -f "$HOME/.Xresources" ]; then
  #       xrdb -merge $HOME/.Xresources > /dev/null 2> /dev/null
  #     fi
  #   fi
  # fi

  # Oracle Java
  if [ ! -e /dev/lxss ]; then
    for oracle_jdk_home in /usr/lib64/jvm/java-8-oracle \
                           /usr/java/default \
                           /usr/lib/jvm/java-8-oracle \
                        ; do
      if ! $oracle_jdk_home/bin/javac -version > /dev/null 2>&1; then
        continue
      fi
      if [ -z "$JAVA_HOME" ]; then
        export JAVA_HOME=$oracle_jdk_home
      fi
      if [ -z "$IDEA_JDK" ]; then
        export IDEA_JDK=$oracle_jdk_home
      fi
      if [ -z "$STUDIO_JDK" ]; then
        export STUDIO_JDK=$oracle_jdk_home
      fi
      if [ -z "$SMARTGIT_JDK" ]; then
        export SMARTGIT_JDK=$oracle_jdk_home
      fi
      if [ -z "$SMARTGITHG_JAVA_HOME" ]; then
        export SMARTGITHG_JAVA_HOME=$oracle_jdk_home
      fi
    done
  fi

  if [ -z "$JAVA_HOME" ] && [ -x /usr/libexec/java_home ]; then
    export JAVA_HOME=`/usr/libexec/java_home`
  fi

  for d in $HOME "" /opt /usr /usr/local /usr/local/go /usr/local/heroku; do
    shrc_pathmunge $d/bin
    shrc_pathmunge $d/sbin
  done

  for d in .cabal .rbenv .rbenv/shims .phpenv .cargo .linuxbrew; do
    shrc_pathmunge $HOME/$d/bin
    shrc_pathmunge $HOME/$d/sbin
  done

  for d in .nodebrew/current $HOME/.local/node $HOME/.local/nodejs; do
    shrc_pathmunge $d/bin
    if [ $? -eq 0 ]; then
      break
    fi
  done

  for d in \
      bin \
      eclipse \
      android-ndk-r7 \
      firefox \
      "Titanium Studio" \
      GitEye \
      Aptana_Studio_3 \
      depot_tools \
    ; do
    shrc_pathmunge $HOME/.local/$d
  done

  for d in \
      arcanist \
      macports \
      mysql-build \
      phantomjs \
      sbt \
      sde-external \
      smartgithg \
    ; do
    shrc_pathmunge $HOME/.local/$d/bin
    shrc_pathmunge $HOME/.local/$d/sbin
  done

  for android_home in $HOME/.local/android-sdk-linux $HOME/.local/android-sdk-macosx $HOME/.local/android-sdk $HOME/Library/Android/sdk; do
    if [ -d $android_home/tools ]; then
      export ANDROID_HOME=$android_home
      shrc_pathmunge $android_home/tools
      shrc_pathmunge $android_home/platform-tools
      break
    fi
  done

  if [ "$is_cygwin" != "yes" ]; then
    for xhome in $JAVA_HOME $ANT_HOME $M2_HOME $SBT_HOME $SCALA_HOME $GRADLE_HOME; do
      shrc_pathmunge $xhome/bin
    done
  fi

  if command_exists yarn; then
    shrc_pathmunge $(yarn global bin)
  fi

  for dir in "$HOME/.local" "$HOME/.local/macports/lib" "$HOME/.linuxbrew"; do
    if [ -d "$dir/include" ]; then
      export C_INCLUDE_PATH=`echo "$C_INCLUDE_PATH:$dir/include" | sed 's/^://'`
      export CPLUS_INCLUDE_PATH=`echo "$CPLUS_INCLUDE_PATH:$dir/include" | sed 's/^://'`
    fi
    if [ -d "$dir/lib" ]; then
      export LIBRARY_PATH=`echo "$LIBRARY_PATH:$dir/lib" | sed 's/^://'`
      export LD_LIBRARY_PATH=`echo "$LD_LIBRARY_PATH:$dir/lib" | sed 's/^://'`
    fi
    if [ -d "$dir/lib64" ]; then
      export LIBRARY_PATH=`echo "$LIBRARY_PATH:$dir/lib64" | sed 's/^://'`
      export LD_LIBRARY_PATH=`echo "$LD_LIBRARY_PATH:$dir/lib64" | sed 's/^://'`
    fi
    if [ -d "$dir/share/man" ]; then
      export MANPATH=`echo "$MANPATH:$dir/share/man" | sed 's/^://'`
    fi
    if [ -d "$dir/share/info" ]; then
      export INFOPATH=`echo "$INFOPATH:$dir/share/info" | sed 's/^://'`
    fi
    if [ -d "$dir/share/pkgconfig" ]; then
      export PKG_CONFIG_PATH=`echo "$PKG_CONFIG_PATH:$dir/share/pkgconfig" | sed 's/^://'`
    fi
    if [ -d "$dir/lib/pkgconfig" ]; then
      export PKG_CONFIG_PATH=`echo "$PKG_CONFIG_PATH:$dir/lib/pkgconfig" | sed 's/^://'`
    fi
  done

  if [ -z "$GOROOT" ]; then
    for goroot in "$HOME/.local/go" "/usr/local/opt/go/libexec"; do
      if [ -d "$goroot" ]; then
        export GOROOT="$goroot"
        break
      fi
    done
  fi

  if [ -z "$GOPATH" ]; then
    for gopath in "$HOME/go" "$HOME/gocode" "$HOME/gopath"; do
      if [ -d "$gopath" ]; then
        export GOPATH="$gopath"
        break
      fi
    done
  fi

  shrc_pathmunge $GOROOT/bin
  shrc_pathmunge $GOPATH/bin

  if [ -z "$SBT_OPTS" ]; then
    # export SBT_OPTS="-Xms256M -Xmx2048M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxMetaspaceSize=2048M"
    export SBT_OPTS="-Xms256M -Xmx4G -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxMetaspaceSize=2048M -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
  fi

  if [ "$(uname -s)" = "Linux" ]; then
    which_atom=$(which atom || true)
    if [ -n "$which_atom" ]; then
      atom2() (
        to_lib_dir="$HOME/.local/atom-hack/lib"
        mkdir -p "$to_lib_dir"
        for from_lib_dir in /usr/lib /usr/lib64 /lib /lib64; do
          if [ ! -d "$from_lib_dir" ]; then
            continue
          fi
          find $from_lib_dir -name "libxcb.so*" | while read -r p; do
            f=$(basename "$p")
            sed -e 's/BIG-REQUESTS/_IG-REQUESTS/' "$p" > "$to_lib_dir/$f.tmp"
            if ! cmp "$to_lib_dir/$f.tmp" "$to_lib_dir/$f"; then
              cp -f "$to_lib_dir/$f.tmp" "$to_lib_dir/$f"
            fi
          done
        done
        export LD_LIBRARY_PATH=$(echo $to_lib_dir:$LD_LIBRARY_PATH | sed -e 's/:$//')
        exec "$which_atom" --disable-gpu "$@"
      )
    fi
  fi
  
  (shrc_setup_x&)

  if $interactive_mode; then
    ## Setup proper term information for emacs ansi-term mode
    if command_exists '[['; then
      [[ $TERM == eterm-color ]] && export TERM=xterm
    fi

    if [ "$DISPLAY" = "" ]; then
      export DISPLAY=127.0.0.1:0
    fi

    if [ -x "$HOME/.rbenv/bin/rbenv" ]; then
      shrc_pathmunge $HOME/.rbenv/bin
      eval "$(rbenv init -)"
    elif command_exists rbenv; then
      eval "$(rbenv init -)"
    elif [ -s "$HOME/.rvm/scripts/rvm" ]; then
      source "$HOME/.rvm/scripts/rvm"
      rvm autolibs read-fail
      rvm rvmrc warning ignore allGemfiles
    fi

    if command_exists phpenv; then
      eval "$(phpenv init -)"
    fi

    NVM_DIR="$HOME/.nvm"
    if [ -x "$HOME/.nodenv/bin/nodenv" ]; then
      shrc_pathmunge $HOME/.nodenv/bin
      eval "$(nodenv init -)"
    elif command_exists nodenv; then
      eval "$(nodenv init -)"
    elif [ -d $NVM_DIR ]; then
      export NVM_DIR
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    fi
  fi
}

shrc_message() {
  for fortune in fortune /usr/games/fortune; do
    if command_exists $fortune; then
      $fortune
      break
    fi
  done
}

shrc_start() {
  umask 077

  if [ "$TERM" = "dumb" ]; then
    if [ -n "$ZSH_VERSION" ]; then
      unsetopt zle
    fi
    PS1='$ '
    return 0
  fi

  if [ -n "$TMPDIR" ]; then
    tmp_dir="$TMPDIR"
  elif [ -n "$TMP" ]; then
    tmp_dir="$TMP"
  elif [ -n "$TEMP" ]; then
    tmp_dir="$TEMP"
  else
    tmp_dir=/tmp
  fi
  tmp_dir="$tmp_dir/shrc_shrc"
  mkdir -p "$tmp_dir"
  tmp_log="$tmp_dir/$$.log"
  rm -f "$tmp_log" || true
  if ! touch "$tmp_log" 2> /dev/null; then
    return 0;
  fi

  # root?
  if [ "`id -u`" = "0" ]; then
    echo "root" >> "$tmp_log"
    return 0;
  fi

  # no home?
  if [ -z "$HOME" ] && [ -w "$HOME" ]; then
    echo "no home env" >> "$tmp_log"
    return 0;
  fi

  # required commands
  if ! command_exists date dirname; then
    echo "no required commands" >> "$tmp_log"
    return 0;
  fi

  # prepare log dir
  if [ -n "$ZSH_VERSION" ]; then
    shell_name=zsh
  elif [ -n "$BASH_VERSION" ]; then
    shell_name=bash
  else
    shell_name=unknown
  fi

  log_file="$HOME/.shrc.d/log/`date '+%Y%m%d/%H%M%S'`_${shell_name}_$$.log"
  log_dir=`dirname "$log_file"`
  mkdir -p "$log_dir"
  if [ ! -w "$log_dir" ]; then
    echo "no log dir" >> "$tmp_log"
    return 0;
  fi

  if [ -t 1 ]; then
    echo "terminal" > "$log_file" 2>&1
    interactive_mode=true
  else
    echo "no terminal" > "$log_file" 2>&1
    interactive_mode=false
  fi

  shrc_main > "$log_file" 2>&1
  shrc_message

  return 0;
}

shrc_update() (
  base_url="https://raw.githubusercontent.com/saturday06/dotfiles/master"

  for downloader in \
    "wget --output-document=@file @url" \
    "curl -Lf --output @file @url" \
  ; do
    which `echo $downloader | sed 's/ .*$//'`
    if [ $? -eq 0 ]; then
      break
    fi
    downloader=""
  done

  if [ -z "$downloader" ]; then
    echo downloader not found
    return
  fi

  echo "downloader: $downloader"

  for file in .emacs .shrc; do
    command=`echo $downloader | sed "s%@file%$HOME/$file.shared%" | sed "s%@url%$base_url/$file%"`
    eval $command
  done

  test -e ~/.emacs || echo "(load \"~/.emacs.shared\")" > ~/.emacs
  test -e ~/.zshrc || echo ". ~/.shrc" > ~/.zshrc
  test -e ~/.bashrc || echo ". ~/.shrc" > ~/.bashrc
)

lomake() (
  cat <<'LOMAKE' | perl - $*
    use strict;
    use warnings;
    use threads;
    use IPC::Open3;
    use Encode;
    use Encode::Guess;
    use Symbol 'gensym';

    my @keys = qw(
      ALLUSERSPROFILE ANT_HOME APPDATA COMMONPROGRAMFILES COMMONPROGRAMFILES(X86)
      COMMONPROGRAMW6432 COMPUTERNAME COMSPEC CYGWIN DISPLAY EDITOR
      FP_NO_HOST_CHECK HOME HOMEDRIVE HOMEPATH HOSTNAME INFOPATH JAVA_HOME
      LOCALAPPDATA LOGNAME LOGONSERVER MANPATH NUMBER_OF_PROCESSORS OS PATH
      PATHEXT PRINTER PROCESSOR_ARCHITECTURE PROCESSOR_IDENTIFIER PROCESSOR_LEVEL
      PROCESSOR_REVISION PROGRAMDATA PROGRAMFILES PROGRAMFILES(X86) PROGRAMW6432
      PUBLIC PWD SESSIONNAME SHLVL SHELL SYSTEMDRIVE SYSTEMROOT TEMP TERM TMP TZ
      USER USERDOMAIN USERDOMAIN_ROAMINGPROFILE USERNAME USERPROFILE WINDIR _
    );

    my $systemroot = `cygpath -u '$ENV{"SYSTEMROOT"}'`;
    $systemroot =~ s/\r?\n?$//;
    $ENV{"PATH"} = join(":", (
      "/usr/local/bin", "/usr/local/sbin", "/bin", "/usr/sbin",
      "$systemroot/System32/Wbem", "$systemroot/System32", "$systemroot",
    ));

    sub acp {
      my ($cp) = `chcp` =~ /([0-9]+)\r?\n?$/;
      return defined $cp ? "CP$cp" : "UTF-8";
    }

    sub io_decode_thread {
      my ($input, $output) = @_;
      my $acp = acp;
      while (my $line = <$input>) {
        my $encoding = guess_encoding($line, ($acp));
        if (ref($encoding)) {
          $line = $encoding->decode($line);
        }
        print $output encode('utf-8', $line);
      }
    }

    sub run_and_decode {
      my ($stdin, $stdout, $stderr);
      $stderr = gensym;
      my $pid = open3($stdin, $stdout, $stderr, @_);
      my $stdout_thread = threads->create(\&io_decode_thread, $stdout, *STDOUT);
      my $stderr_thread = threads->create(\&io_decode_thread, $stderr, *STDERR);
      waitpid($pid, 0);
      $stdout_thread->join();
      $stderr_thread->join();
      close $stdout;
      close $stderr;
      close $stdin;
      $?
    }

    foreach my $key (keys %ENV) {
      unless (grep {$_ eq uc($key)} @keys) {
        delete $ENV{$key}
      }
    }
    $ENV{"SHELL"} = "/usr/bin/dash";
    run_and_decode($ENV{"SHELL"}, "-c", "test -e Makefile||./autogen.sh")
      || run_and_decode("/opt/lo/bin/make", @ARGV);
LOMAKE
)

muhenkan_mod3() (
  cat <<XMODMAP | while read -r line; do
clear mod3
add mod3 = Muhenkan
XMODMAP
    xmodmap -e "$line"
  done
)

muhenkan_mod4() (
  cat <<XMODMAP | while read -r line; do
clear mod4
add mod4 = Muhenkan
XMODMAP
    xmodmap -e "$line"
  done
)

swap_control_caps() (
  cat <<XMODMAP | while read -r line; do
keycode 66 = Caps_Lock
remove Lock = Caps_Lock
keysym Caps_Lock = Control_L
add Control = Control_L
XMODMAP
    echo xmodmap -e "$line"
    xmodmap -e "$line"
  done
)

swap_command_option() (
  cat <<XMODMAP | while read -r line; do
keycode 64 = Alt_L
keycode 133 = Super_L
remove Mod1 = Alt_L
remove Mod4 = Super_L
add Mod1 = Super_L
add Mod4 = Alt_L

keycode 108 = Alt_R
keycode 134 = Super_R
remove Mod1 = Alt_R
remove Mod4 = Super_R
add Mod1 = Super_R
add Mod4 = Alt_R
XMODMAP
    echo xmodmap -e "$line"
    xmodmap -e "$line"
  done
)

shrc_compinit_u() {
  (
    message=$1
    sep="--"
    loop=${#message}
    while [ $loop -ne 0 ]; do
      loop=`expr $loop - 1`
      sep="-$sep"
    done
    echo
    echo $sep
    echo $message
    echo " compinit -u"
    echo $sep
    echo
  )
  compinit -u
}

shrc_nohup() (
  if [ -n "$ZSH_VERSION" ]; then
    eval "$* > /dev/null 2> /dev/null &!" &
  else
    nohup $* > /dev/null 2> /dev/null
  fi
)

command_exists() (
  while [ $# -gt 0 ]; do
    if ! which $1 > /dev/null 2> /dev/null; then
      if ! which "$1" > /dev/null 2> /dev/null; then
        return 1
      fi
    fi
    shift
  done
  return 0
)

shrc_nawk() (
  for awk_variant in gawk nawk awk mawk; do
    for awk_dir in "" /bin/ /usr/bin/ /usr/local/bin/; do
      if command_exists "$awk_dir/$awk_variant"; then
        if $awk_dir$awk_variant 'BEGIN{sub(/foo/, "")}' 2> /dev/null; then
          $awk_dir$awk_variant "$@"
          return $?
        fi
      fi
    done
  done
  return 1
)

shrc_has_nawk() (
  shrc_nawk 'BEGIN{sub(/foo/, "")}' 2> /dev/null
  return $?
)

shrc_flock_timeout_0() (
  if command_exists flock; then
    flock --timeout=0 "$@" || true
  else
    $@
  fi
)

shrc_add_git_config() (
  config=$1
  value=$2
  if command_exists git; then
    # git config --global --unset-all $config
    shrc_flock_timeout_0 ~/.gitconfig git config --global $config $value
  fi
)

shrc_set_home() {
  if [ -w "$HOME" ]; then
    return
  fi
  user_tmp="`id -nu 2> /dev/null`"
  home_tmp=/home/$user_tmp
  if [ "$user_tmp" != "" -a -d "$home_tmp" -a -x "$home_tmp" ]; then
    export HOME=$home_tmp
  fi
}

shrc_pathmunge_after_rvm() {
  if ! shrc_has_nawk; then
    echo "'nawk' not found" 1>&2
    echo "$PATH:$1"
    return 1
  fi

  shrc_nawk 'BEGIN {
    extra_path = ARGV[1]
    extra_path_added = 0
    n = split (ENVIRON["PATH"], paths, ":")
    for (i = 1; i <= n; ++i) {
      if (i != 1) {
        printf(":")
      }
      if (!extra_path_added && !index(paths[i], "/.rvm/")) {
        extra_path_added = 1
        printf("%s:", extra_path)
      }
      printf(paths[i])
    }
  }' $1
}

shrc_pathmunge() {
  echo "PATHMUNGE $1 --> $PATH"
  if [ ! -d $1 ]; then
    echo "--> no arg"
    return
  fi
  if [ "`echo $PATH | sed 's/:/\n/g' | grep -x $1`" != "" ]; then
    echo "--> already found"
    return
  fi
  if [ "$2" = "after" ] ; then
    export PATH="$PATH:$1"
    echo "--> $PATH"
  else
    export PATH=`shrc_pathmunge_after_rvm $1`
    echo "--> $PATH"
  fi
  if command_exists rehash; then
    rehash
  elif command_exists hash; then
    hash -r
  fi
}

shrc_setup_x() (
  if ! command_exists xmodmap; then
    echo xmodmap not found
    return
  fi

  for i in `seq 30`; do
    if xmodmap -pk > /dev/null 2> /dev/null; then
      break
    fi
    echo waiting for 'xmodmap -pk'
    sleep 1
  done

  if ! xmodmap -pk > /dev/null 2> /dev/null; then
    echo 'xmodmap -pk' failed
    return
  fi

#  muhenkan_mod4
#  swap_control_caps

#  if command_exists wmname; then
#    wmname Sawfish
#  fi

  if ! command_exists xprop '[['; then
    return
  fi

  # Fix X window manager name properties to work around java bugs with
  # non-reparenting window managers. This is a different solution from
  # the wmname utility provided by suckless, as it is NetWM compatible,
  # while wmname sets the value of _NET_SUPPORTING_WM_CHECK to root win.
  IRONIC_WM_NAME="LG3D"
  NET_WIN=$(xprop -root _NET_SUPPORTING_WM_CHECK | shrc_nawk -F "# " '{print $2}')
  if [[ "$NET_WIN" == 0x* ]]; then
    # xprop cannot reliably set UTF8_STRING, so we replace as string.
    # fortunately, jdk is OK with this, but wm-spec says use UTF8_STRING.
    xprop -id "$NET_WIN" -remove _NET_WM_NAME
    xprop -id "$NET_WIN" -f _NET_WM_NAME 8s -set _NET_WM_NAME "$IRONIC_WM_NAME"
  else
    # even if we're not net compatible, do java workaround
    xprop -root -remove _NET_WM_NAME
    xprop -root -f _NET_WM_NAME 8s -set _NET_WM_NAME "$IRONIC_WM_NAME"
  fi

  if [ -n "$IBUS_ENABLE_SYNC_MODE" ]; then
    export IBUS_ENABLE_SYNC_MODE=1
    if command_exists ibus-daemon; then
      ibus-daemon -xrd
    fi
  fi

#  if command_exists gsettings; then
#    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'jp')]"
#    gsettings set org.gnome.desktop.input-sources sources "[('ibus', 'mozc-jp')]"
#  fi
)

activate_hsenv() {
  local search_dir=$PWD
  while [ $search_dir != "/" ]; do
    local hsenv_found=false
    for dir in `cd $search_dir && find . -maxdepth 1 -type d -name ".hsenv*"`; do
      if $hsenv_found; then
        echo multiple environments in $search_dir , manual activaton required
        return
      elif [ -n "$dir" ] && [ -e $search_dir/$dir/bin/activate ]; then
        hsenv_found=true
      fi
    done
    if ! $hsenv_found; then
      search_dir=`cd $search_dir/.. && pwd`
      continue
    fi
    if [ -n "$HSENV" ] && [ "$HSENV" != "$search_dir" ]; then
      deactivate_hsenv
    fi
    if [ -z "$HSENV" ]; then
      pwd_backup=$PWD
      cd $search_dir
      source .hsenv*/bin/activate
      cd $pwd_backup
    fi
    return
  done
  if [ -n "$HSENV" ]; then
    deactivate_hsenv
  fi
}

mozc_jp() (
  gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'jp')]"
  sleep 1
  gsettings set org.gnome.desktop.input-sources sources "[('ibus', 'mozc-jp')]"
)

install_macports() (
  PATH=/usr/bin:/usr/sbin:/bin:/sbin ./configure --enable-readline --prefix=$HOME/usr/macports --with-install-user=`id -un` --with-install-group=`id -gn`
)

update_mac() (
  defaults write -g InitialKeyRepeat -int 30 # normal minimum is 15 (225 ms)
  defaults write -g KeyRepeat -int 4 # normal minimum is 2 (30 ms)
)

brew-cask-upgrade() (
  brew update
  for app in $(brew cask list); do 
    latest="$(brew cask info "${app}" | awk 'NR==1{print $2}')"
    versions=($(LS_OPTIONS= \ls -1 "/usr/local/Caskroom/${app}/.metadata/"))
    current=$(echo ${versions} | awk '{print $NF}')
    if [[ "${latest}" = "latest" ]]; then 
      echo "[?] ${app}: ${current} == ${latest}";
      [[ "$1" = "-f" ]] && brew cask install "${app}" --force;
      continue;
    elif [[ "${current}" = "${latest}" ]]; then
      echo "${app} ${current} is up to date"
      continue;
    fi
    echo "[+] ${app}: ${current} -> ${latest}"; 
    brew cask uninstall "${app}" --force; 
    brew cask install "${app}"; 
  done; 
)

shrc_update_xenv() (
  set -eux
  for dir in ~/.rbenv ~/.rbenv/plugins/ruby-build ~/.nodenv ~/.nodenv/plugins/node-build; do
    if [ -d $dir ]; then
      cd $dir
      git fetch --prune
      git reset --hard origin/master
    fi
  done
)

shrc_dep_go() (
  set -eux
  go get -u github.com/nsf/gocode
  go get -u github.com/rogpeppe/godef
  go get -u github.com/golang/lint/golint
  go get -u github.com/kisielk/errcheck
)

shrc_dep_rust() (
  set -eux
  rustup component add rustfmt-preview rls-preview rust-analysis rust-src
  rustup component add rustfmt-preview rls-preview rust-analysis rust-src --toolchain=stable
  rustup run stable cargo install racer
)

shrc_dep_emacs() (
  set -eux
  emacs --batch --eval "(progn (load \"~/.emacs\")(require 'package)(package-initialize)(package-refresh-contents))"
  for package in \
      company-go \
      company-quickhelp \
      racer \
      intero \
    ; do
    emacs --batch --eval "(progn (load \"~/.emacs\")(require 'package)(package-initialize)(package-install '$package))"
  done
)

idea() (
  shrc_nohup ~/.local/idea-IC/bin/idea.sh
)

clion() (
  shrc_nohup ~/.local/clion/bin/clion.sh
)

pycharm() (
  shrc_nohup ~/.local/pycharm/bin/pycharm.sh
)

eclipse() (
  # https://bugs.eclipse.org/bugs/show_bug.cgi?id=491855
  # export SWT_GTK=0
  shrc_nohup ~/.local/eclipse/eclipse
)

shrc_start
