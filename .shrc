#!/bin/sh
# -*- coding: us-ascii-unix; mode: shell-script -*-

shrc_main() {
  if [ -n "$ZSH_VERSION" ]; then
    HISTFILE=~/.histfile
    HISTSIZE=50000
    SAVEHIST=50000
    LISTMAX=0
    export HISTFILE
    export HISTSIZE
    export SAVEHIST
    export LISTMAX
    #PROMPT="%n@%m%# "
    #PROMPT='%% '
    #PROMPT='%n%# '
    PROMPT='%# '
    RPROMPT='[%~]'
    export PROMPT
    export RPROMPT

    #path=($path(N^W)) # ignore world-writable
    #path=($path(N^IW)) # ignore group-writable

    setopt append_history
    setopt appendhistory
    setopt auto_list
    setopt auto_menu
    setopt auto_param_slash
    setopt auto_pushd
    setopt autocd
    setopt extended_history
    setopt extendedglob
    setopt hist_ignore_dups
    setopt hist_reduce_blanks
    setopt list_types # show candidate's type
    setopt no_beep
    setopt nocaseglob
    setopt nomatch
    setopt notify
    setopt print_eight_bit
    setopt prompt_subst
    setopt pushd_ignore_dups
    setopt share_history
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info
    autoload -Uz compinit

    bindkey -e

    if [ "$TERM" = eterm-color ]; then
      bindkey -r "^[x"
    fi

    if [ "$(uname -o 2>/dev/null)" = "Cygwin" ]; then
      shrc_compinit_u " $0: your os is Cygwin."
      is_cygwin=yes
    elif [ "$(uname -s 2>/dev/null)" = "Interix" ]; then
      shrc_compinit_u " $0: your os is Interix."
    else
      compinit
    fi

    if vcs_info >/dev/null 2>/dev/null; then
      zstyle ':vcs_info:git:*' check-for-changes true
      zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
      zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
      zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
      zstyle ':vcs_info:*' actionformats '[%b|%a]'
      precmd_vcs_info() {
        if ! (echo "$PWD" | grep -E '^/mnt/[a-z]/' >/dev/null 2>&1); then
          LC_ALL=en_US.UTF-8 vcs_info
        fi
      }
      add-zsh-hook precmd precmd_vcs_info
      RPROMPT="\${vcs_info_msg_0_}"$RPROMPT
    fi

    # RE: Case insensitive completion problems with cygwin
    # http://www.zsh.org/mla/users/2006/msg01116.html
    #zstyle ':completion:*' matcher-list 'm:{a-z}=3D{A-Z}'
    #zstyle ':completion:*:paths' accept-exact 'c:' 'b:' 'w:' 'r:' 'v:'
    #zstyle ':completion:*' fake-files '/:c' '/:b' '/:w' '/:r' '/:v'
    #zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
    zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
    zstyle ':completion:*:default' menu select=1

    rebasedir() (
      find "$1" -type f -iregex ".+\\.\\(dll\\|exe\\)$" #| xargs rebase -v
    )

    rebaselocal() (
      rebasedir /usr/local
      rebasedir "$HOME/.rbenv"
    )

    if command_exists direnv; then
      eval "$(direnv hook zsh)"
    fi

  elif [ -n "$BASH_VERSION" ]; then
    # shellcheck disable=SC3044
    shopt -s nocaseglob histappend

    export PS1='$ '

    # Ignore case while completing
    set completion-ignore-case on
    # Make Bash 8bit clean
    set meta-flag on
    set convert-meta off
    set output-meta on

    export HISTCONTROL=ignoredups:erasedups:ignorespace
    export HISTSIZE=10000

    # After each command, save and reload history
    export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
    if command_exists direnv; then
      eval "$(direnv hook bash)"
    fi

  else
    echo no bash/zsh
    interactive_mode=false
  fi

  echo interactive_mode=$interactive_mode

  shrc_add_git_config core.autocrlf false
  shrc_add_git_config core.quotepath false
  shrc_add_git_config core.precomposeunicode true
  shrc_add_git_config pull.ff only
  shrc_add_git_config push.default current

  if [ "$(uname -o 2>/dev/null)" = "Cygwin" ]; then
    # Cygwin
    #export CYGWIN="nodosfilewarning error_start=dumper codepage:utf8"
    export CYGWIN="nodosfilewarning error_start=dumper"
    #export LANG=en_US.UTF-8
    #export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/usr/lib/lapack
    shrc_set_home
    if [ -n "$APPDATA" ]; then
      appdata=$(cygpath --unix "$APPDATA")
      shrc_pathmunge "$appdata/npm"
    fi
    # for p in "$ProgramW6432" "$PROGRAMFILES"; do
    #   shrc_pathmunge "$p/nodejs"
    # done
    shrc_add_git_config core.filemode false
    tmp_path=$PATH
    filtered_path=
    while true; do
      head=${tmp_path%%:*}
      tmp_path=${tmp_path#*:}
      if [ "$head" = "" ]; then
        PATH=${filtered_path#:}
        export PATH
        break
      fi
      match=false
      if echo "$head" | grep -i "^/cygdrive/" >/dev/null; then
        for r in "/microsoft sql server/" \
          "/microsoft/web platform installer$" \
          "/microsoft sdks/typescript/" \
          "/windowspowershell/" \
          "/gnupg/pub$" \
          "/git/cmd$" \
          "/nvidia corporation/physx/common" \
          "/gtksharp/" \
          "^/cygdrive/.*/ghc.*/bin$" \
          "^/cygdrive/.*/cabal/bin$" \
          "/mingw/bin$"; do
          if echo "$head" | grep -i "$r" >/dev/null; then
            match=true
            break
          fi
        done
      fi
      if ! $match; then
        filtered_path="$filtered_path:$head"
      fi
    done
  elif [ "$(uname -o 2>/dev/null)" = "Msys" ]; then
    # MSYS
    shrc_set_home
    shrc_add_git_config core.filemode false
  elif [ "$(uname -s 2>/dev/null)" = "Interix" ]; then
    # Interix
    shrc_pathmunge /opt/gcc.4.2/bin
    if [ "$TERM" = "" ]; then
      export TERM=interix
    fi

    export LANG=C
    export LANGUAGE=C
    export LC_ALL=C

    user_tmp="$(id -u 2>/dev/null)"
    if [ "$user_tmp" = "197108" ]; then
      # Administrator
      export PS1='# '
      shrc_pathmunge /usr/sbin
      shrc_pathmunge /usr/local/sbin
      if [ "$HOME" = "" ] || [ "$HOME" = "/" ]; then
        rm -f "$HISTFILE" ~/.zcompdump
        mkdir -p /root
        export HOME=/root
        #export HOME=`winpath2unix $USERPROFILE`
      fi
    fi
    shrc_add_git_config core.filemode false
  elif [ "$(uname -s 2>/dev/null)" = "Darwin" ]; then
    # OSX
    shrc_add_git_config core.precomposeunicode true
    defaults write com.apple.finder QuitMenuItem -bool yes
    eval "$(/usr/libexec/path_helper -s)" || true
    export LESSCHARSET=utf-8
  elif [ "$(uname -r | grep -e '-co-' 2>/dev/null)" != "" ]; then
    # coLinux
    export DISPLAY=10.0.2.2:0
  elif grep Microsoft >/dev/null 2>&1 </proc/sys/kernel/osrelease; then
    # WSL
    export DISPLAY=:0
    export GHCRTS="-V0 $GHCRTS"
  fi

  export HOMEBREW_NO_ANALYTICS=1
  export DOTNET_CLI_TELEMETRY_OPTOUT=1

  if ls --color=auto --show-control-chars -F >/dev/null 2>/dev/null; then
    ls() { command ls --color=auto --show-control-chars -F "$@"; }
  elif command ls -G -F >/dev/null 2>/dev/null; then
    ls() { command ls -G -F "$@"; }
  elif command ls -F >/dev/null 2>/dev/null; then
    ls() { command ls -F "$@"; }
  fi

  if command_exists emacs; then
    EDITOR="$(which emacs)"
    export EDITOR
    #emacs() (
    #  $EDITOR $*
    #emacsclient --alternate-editor="$EDITOR" $*
    #emacsclient --create-frame --no-wait --alternate-editor="$EDITOR" $*
    #alias emacs="emacsclient --create-frame --alternate-editor='$EDITOR'"
    #)
  else
    for editor in nano vim vi; do
      if which ${editor} >/dev/null 2>/dev/null; then
        EDITOR=${editor}
        export EDITOR
        break
      fi
    done
  fi

  for dropbox in dropbox ~/.dropbox-dist/dropbox; do
    if command_exists $dropbox; then
      shrc_nohup $dropbox start
      break
    fi
  done

  # if [ "$DISPLAY" != "" ]; then
  #   which xrdb > /dev/null 2> /dev/null
  #   if [ $? -eq 0 ]; then
  #     if [ -f "$HOME/.Xresources" ]; then
  #       xrdb -merge $HOME/.Xresources > /dev/null 2> /dev/null
  #     fi
  #   fi
  # fi

  # Oracle Java
  if [ ! -e /dev/lxss ]; then
    for oracle_jdk_home in /usr/lib64/jvm/java-8-oracle \
      /usr/java/default \
      /usr/lib/jvm/java-8-oracle; do
      if ! $oracle_jdk_home/bin/javac -version >/dev/null 2>&1; then
        continue
      fi
      if [ -z "$JAVA_HOME" ]; then
        JAVA_HOME=$oracle_jdk_home
        export JAVA_HOME
      fi
      if [ -z "$IDEA_JDK" ]; then
        IDEA_JDK=$oracle_jdk_home
        export IDEA_JDK
      fi
      if [ -z "$STUDIO_JDK" ]; then
        STUDIO_JDK=$oracle_jdk_home
        export STUDIO_JDK
      fi
      if [ -z "$SMARTGIT_JDK" ]; then
        SMARTGIT_JDK=$oracle_jdk_home
        export SMARTGIT_JDK
      fi
      if [ -z "$SMARTGITHG_JAVA_HOME" ]; then
        SMARTGITHG_JAVA_HOME=$oracle_jdk_home
        export SMARTGITHG_JAVA_HOME
      fi
    done
  fi

  if [ -z "$JAVA_HOME" ] && [ -x /usr/libexec/java_home ]; then
    JAVA_HOME=$(/usr/libexec/java_home)
    export JAVA_HOME
  fi

  for d in $HOME "" /opt /usr /usr/local /usr/local/go /usr/local/heroku /opt/homebrew; do
    shrc_pathmunge "$d/bin"
    shrc_pathmunge "$d/sbin"
  done

  for d in .cabal .rbenv .rbenv/shims .phpenv .cargo .linuxbrew .pub-cache .poetry; do
    shrc_pathmunge "$HOME/$d/bin"
    shrc_pathmunge "$HOME/$d/sbin"
  done

  for d in .nodebrew/current $HOME/.local/node $HOME/.local/nodejs $HOME/.dotnet/tools; do
    if shrc_pathmunge "$d/bin"; then
      break
    fi
  done

  for d in \
    bin \
    eclipse \
    android-ndk-r7 \
    firefox \
    "Titanium Studio" \
    GitEye \
    Aptana_Studio_3 \
    depot_tools; do
    shrc_pathmunge "$HOME/.local/$d"
  done

  for d in \
    arcanist \
    macports \
    mysql-build \
    phantomjs \
    sbt \
    sde-external \
    smartgithg \
    dart-sdk; do
    shrc_pathmunge "$HOME/.local/$d/bin"
    shrc_pathmunge "$HOME/.local/$d/sbin"
  done

  for android_home in $HOME/.local/android-sdk-linux $HOME/.local/android-sdk-macosx $HOME/.local/android-sdk $HOME/Library/Android/sdk; do
    if [ -d "$android_home/tools" ]; then
      export ANDROID_HOME="$android_home"
      shrc_pathmunge "$android_home/tools"
      shrc_pathmunge "$android_home/platform-tools"
      break
    fi
  done

  if [ "$is_cygwin" != "yes" ]; then
    for xhome in $JAVA_HOME $ANT_HOME $M2_HOME $SBT_HOME $SCALA_HOME $GRADLE_HOME; do
      shrc_pathmunge "$xhome/bin"
    done
  fi

  if command_exists yarn; then
    shrc_pathmunge "$(yarn global bin)"
  fi

  for dir in "$HOME/.local" "$HOME/.local/macports/lib" "$HOME/.linuxbrew"; do
    if [ -d "$dir/include" ]; then
      C_INCLUDE_PATH=$(echo "$C_INCLUDE_PATH:$dir/include" | sed 's/^://')
      export C_INCLUDE_PATH
      CPLUS_INCLUDE_PATH=$(echo "$CPLUS_INCLUDE_PATH:$dir/include" | sed 's/^://')
      export CPLUS_INCLUDE_PATH
    fi
    if [ -d "$dir/lib" ]; then
      LIBRARY_PATH=$(echo "$LIBRARY_PATH:$dir/lib" | sed 's/^://')
      export LIBRARY_PATH
      LD_LIBRARY_PATH=$(echo "$LD_LIBRARY_PATH:$dir/lib" | sed 's/^://')
      export LD_LIBRARY_PATH
    fi
    if [ -d "$dir/lib64" ]; then
      LIBRARY_PATH=$(echo "$LIBRARY_PATH:$dir/lib64" | sed 's/^://')
      export LIBRARY_PATH
      LD_LIBRARY_PATH=$(echo "$LD_LIBRARY_PATH:$dir/lib64" | sed 's/^://')
      export LD_LIBRARY_PATH
    fi
    if [ -d "$dir/share/man" ]; then
      MANPATH=$(echo "$MANPATH:$dir/share/man" | sed 's/^://')
      export MANPATH
    fi
    if [ -d "$dir/share/info" ]; then
      INFOPATH=$(echo "$INFOPATH:$dir/share/info" | sed 's/^://')
      export INFOPATH
    fi
    if [ -d "$dir/share/pkgconfig" ]; then
      PKG_CONFIG_PATH=$(echo "$PKG_CONFIG_PATH:$dir/share/pkgconfig" | sed 's/^://')
      export PKG_CONFIG_PATH
    fi
    if [ -d "$dir/lib/pkgconfig" ]; then
      PKG_CONFIG_PATH=$(echo "$PKG_CONFIG_PATH:$dir/lib/pkgconfig" | sed 's/^://')
      export PKG_CONFIG_PATH
    fi
  done

  if [ -z "$GOROOT" ]; then
    for goroot in "$HOME/.local/go" "/usr/local/opt/go/libexec"; do
      if [ -d "$goroot" ]; then
        GOROOT="$goroot"
        export GOROOT
        break
      fi
    done
  fi

  if [ -z "$GOPATH" ]; then
    for gopath in "$HOME/go" "$HOME/gocode" "$HOME/gopath"; do
      if [ -d "$gopath" ]; then
        export GOPATH="$gopath"
        break
      fi
    done
  fi

  if [ -z "$ANDROID_NDK_HOME" ]; then
    android_ndk_home=$(find "$HOME/.local" -maxdepth 1 -type d -name 'android-ndk-*' | sort | head -n 1)
    if [ -n "$android_ndk_home" ]; then
      export ANDROID_NDK_HOME="$android_ndk_home"
    fi
  fi

  shrc_pathmunge "$GOROOT/bin"
  shrc_pathmunge "$GOPATH/bin"

  if [ -z "$SBT_OPTS" ]; then
    # export SBT_OPTS="-Xms256M -Xmx2048M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxMetaspaceSize=2048M"
    export SBT_OPTS="-Xms256M -Xmx4G -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxMetaspaceSize=2048M -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
  fi

  # (shrc_setup_x&)

  if $interactive_mode; then
    ## Setup proper term information for emacs ansi-term mode
    if [ "$TERM" = "eterm-color" ]; then
      TERM=xterm
      export TERM
    fi

    if [ "$DISPLAY" = "" ]; then
      export DISPLAY=127.0.0.1:0
    fi

    if [ -x "$HOME/.rbenv/bin/rbenv" ]; then
      shrc_pathmunge "$HOME/.rbenv/bin"
      eval "$(rbenv init -)"
    elif command_exists rbenv; then
      eval "$(rbenv init -)"
    fi

    if command_exists phpenv; then
      eval "$(phpenv init -)"
    fi

    if [ -x "$HOME/.nodenv/bin/nodenv" ]; then
      shrc_pathmunge "$HOME/.nodenv/bin"
      eval "$(nodenv init -)"
    elif command_exists nodenv; then
      eval "$(nodenv init -)"
    fi
  fi
}

shrc_message() {
  for fortune in fortune /usr/games/fortune; do
    if command_exists $fortune; then
      $fortune
      break
    fi
  done
}

shrc_start() {
  umask 077

  if [ "$TERM" = "dumb" ]; then
    if [ -n "$ZSH_VERSION" ]; then
      unsetopt zle
    fi
    PS1='$ '
    return 0
  fi

  if [ -n "$TMPDIR" ]; then
    tmp_dir="$TMPDIR"
  elif [ -n "$TMP" ]; then
    tmp_dir="$TMP"
  elif [ -n "$TEMP" ]; then
    tmp_dir="$TEMP"
  else
    tmp_dir=/tmp
  fi
  tmp_dir="$tmp_dir/shrc_shrc"
  mkdir -p "$tmp_dir"
  tmp_log="$tmp_dir/$$.log"
  rm -f "$tmp_log" || true
  if ! touch "$tmp_log" 2>/dev/null; then
    return 0
  fi

  # root?
  if [ "$(id -u)" = "0" ]; then
    echo "root" >>"$tmp_log"
    return 0
  fi

  # no home?
  if [ -z "$HOME" ] && [ -w "$HOME" ]; then
    echo "no home env" >>"$tmp_log"
    return 0
  fi

  # required commands
  if ! command_exists date dirname; then
    echo "no required commands" >>"$tmp_log"
    return 0
  fi

  # prepare log dir
  if [ -n "$ZSH_VERSION" ]; then
    shell_name=zsh
  elif [ -n "$BASH_VERSION" ]; then
    shell_name=bash
  else
    shell_name=unknown
  fi

  log_file="$HOME/.shrc.d/log/$(date '+%Y%m%d/%H%M%S')_${shell_name}_$$.log"
  log_dir=$(dirname "$log_file")
  mkdir -p "$log_dir"
  if [ ! -w "$log_dir" ]; then
    echo "no log dir" >>"$tmp_log"
    return 0
  fi

  if [ -t 1 ]; then
    echo "terminal" >"$log_file" 2>&1
    interactive_mode=true
  else
    echo "no terminal" >"$log_file" 2>&1
    interactive_mode=false
  fi

  shrc_main >"$log_file" 2>&1
  shrc_message

  return 0
}

shrc_update() (
  base_url="https://raw.githubusercontent.com/saturday06/dotfiles/master"

  for downloader in \
    "wget --output-document=@file @url" \
    "curl -Lf --output @file @url"; do
    downloader_cmd=${downloader%% *}
    if command -v "$downloader_cmd"; then
      break
    fi
    downloader=""
  done

  if [ -z "$downloader" ]; then
    echo downloader not found
    return
  fi

  echo "downloader: $downloader"

  for file in .emacs .shrc; do
    command=$(echo "$downloader" | sed "s%@file%$HOME/$file.shared%" | sed "s%@url%$base_url/$file%")
    eval "$command"
  done

  test -e ~/.emacs || echo "(load \"~/.emacs.shared\")" >~/.emacs
  test -e ~/.zshrc || echo ". ~/.shrc" >~/.zshrc
  test -e ~/.bashrc || echo ". ~/.shrc" >~/.bashrc
)

muhenkan_mod3() (
  cat <<XMODMAP | while read -r line; do
clear mod3
add mod3 = Muhenkan
XMODMAP
    xmodmap -e "$line"
  done
)

muhenkan_mod4() (
  cat <<XMODMAP | while read -r line; do
clear mod4
add mod4 = Muhenkan
XMODMAP
    xmodmap -e "$line"
  done
)

swap_control_caps() (
  cat <<XMODMAP | while read -r line; do
keycode 66 = Caps_Lock
remove Lock = Caps_Lock
keysym Caps_Lock = Control_L
add Control = Control_L
XMODMAP
    echo xmodmap -e "$line"
    xmodmap -e "$line"
  done
)

swap_command_option() (
  cat <<XMODMAP | while read -r line; do
keycode 64 = Alt_L
keycode 133 = Super_L
remove Mod1 = Alt_L
remove Mod4 = Super_L
add Mod1 = Super_L
add Mod4 = Alt_L

keycode 108 = Alt_R
keycode 134 = Super_R
remove Mod1 = Alt_R
remove Mod4 = Super_R
add Mod1 = Super_R
add Mod4 = Alt_R
XMODMAP
    echo xmodmap -e "$line"
    xmodmap -e "$line"
  done
)

shrc_compinit_u() {
  (
    message=$1
    sep="--"
    loop=${#message}
    while [ "$loop" != "0" ]; do
      loop=$((loop - 1))
      sep="-$sep"
    done
    echo
    echo $sep
    echo "$message"
    echo " compinit -u"
    echo $sep
    echo
  )
  compinit -u
}

shrc_nohup() (
  if [ -n "$ZSH_VERSION" ]; then
    eval "$* > /dev/null 2> /dev/null &!" &
  else
    nohup "$@" >/dev/null 2>/dev/null
  fi
)

command_exists() (
  while [ $# -gt 0 ]; do
    if ! command -v "$1" >/dev/null 2>/dev/null; then
      return 1
    fi
    shift
  done
  return 0
)

shrc_nawk() (
  for awk_variant in gawk nawk awk mawk; do
    for awk_dir in "" /bin/ /usr/bin/ /usr/local/bin/; do
      if command_exists "$awk_dir/$awk_variant"; then
        if $awk_dir$awk_variant 'BEGIN{sub(/foo/, "")}' 2>/dev/null; then
          $awk_dir$awk_variant "$@"
          return $?
        fi
      fi
    done
  done
  return 1
)

shrc_has_nawk() (
  shrc_nawk 'BEGIN{sub(/foo/, "")}' 2>/dev/null
  return $?
)

shrc_flock_timeout_0() (
  if command_exists flock; then
    flock --timeout=0 "$@" || true
  else
    "$@"
  fi
)

shrc_add_git_config() (
  config=$1
  value=$2
  if command_exists git; then
    # git config --global --unset-all $config
    shrc_flock_timeout_0 ~/.gitconfig git config --global "$config" "$value"
  fi
)

shrc_set_home() {
  if [ -w "$HOME" ]; then
    return
  fi
  user_tmp="$(id -nu 2>/dev/null)"
  home_tmp=/home/$user_tmp
  if [ "$user_tmp" != "" ] && [ -d "$home_tmp" ] && [ -x "$home_tmp" ]; then
    export HOME="$home_tmp"
  fi
}

shrc_pathmunge_after_rvm() {
  if ! shrc_has_nawk; then
    echo "'nawk' not found" 1>&2
    echo "$PATH:$1"
    return 1
  fi

  shrc_nawk 'BEGIN {
    extra_path = ARGV[1]
    extra_path_added = 0
    n = split (ENVIRON["PATH"], paths, ":")
    for (i = 1; i <= n; ++i) {
      if (i != 1) {
        printf(":")
      }
      if (!extra_path_added && !index(paths[i], "/.rvm/")) {
        extra_path_added = 1
        printf("%s:", extra_path)
      }
      printf(paths[i])
    }
  }' "$1"
}

shrc_pathmunge() {
  echo "PATHMUNGE $1 --> $PATH"
  if [ ! -d "$1" ]; then
    echo "--> no arg"
    return
  fi
  if [ "$(echo "$PATH" | sed 's/:/\n/g' | grep -x "$1")" != "" ]; then
    echo "--> already found"
    return
  fi
  if [ "$2" = "after" ]; then
    PATH="$PATH:$1"
    export PATH
    echo "--> $PATH"
  else
    PATH=$(shrc_pathmunge_after_rvm "$1")
    export PATH
    echo "--> $PATH"
  fi
  if command_exists rehash; then
    rehash
  elif command_exists hash; then
    hash -r
  fi
}

shrc_setup_x() (
  if [ "$(uname -s 2>/dev/null)" = "Darwin" ]; then
    return
  fi

  if ! command_exists xmodmap; then
    echo xmodmap not found
    return
  fi

  for _ in $(seq 30); do
    if xmodmap -pk >/dev/null 2>/dev/null; then
      break
    fi
    echo waiting for 'xmodmap -pk'
    sleep 1
  done

  if ! xmodmap -pk >/dev/null 2>/dev/null; then
    echo 'xmodmap -pk' failed
    return
  fi

  #  muhenkan_mod4
  #  swap_control_caps

  #  if command_exists wmname; then
  #    wmname Sawfish
  #  fi
)

mozc_jp() (
  gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'jp')]"
  sleep 1
  gsettings set org.gnome.desktop.input-sources sources "[('ibus', 'mozc-jp')]"
)

update_mac() (
  defaults write -g InitialKeyRepeat -int 30 # normal minimum is 15 (225 ms)
  defaults write -g KeyRepeat -int 4         # normal minimum is 2 (30 ms)
)

shrc_update_depot_tools() (
  set -eux
  if command_exists gclient; then
    cd "$(dirname "$(command -v gclient)")"
    git fetch --prune
    git reset --hard origin/master
  fi
)

shrc_setup_intellij_variant() (
  dir_prefix=$1
  script=$2
  title=$3

  if [ -z "$dir_prefix" ]; then
    exit 1
  fi

  if [ -z "$script" ]; then
    exit 1
  fi

  if [ -z "$title" ]; then
    exit 1
  fi

  dir=$(find ~/.local -maxdepth 1 -name "${dir_prefix}-*" | awk -F- '{print $3"_ "$0}' | awk -F. '{printf("%09d%09d%09d %s\n",$1,$2,$3,$0)}' | sort -r | head -n 1 | awk '{print $3}')
  if [ ! -d "$dir" ]; then
    exit 1
  fi

  cat <<SH >"$HOME/.local/bin/$script"
#!/bin/sh
set -eu

dir=\$(find ~/.local -maxdepth 1 -name "${dir_prefix}-*"|awk -F- '{print \$3"_ "\$0}'|awk -F. '{printf("%09d%09d%09d %s\n",\$1,\$2,\$3,\$0)}'|sort -r|head -n 1|awk '{print \$3}')
if [ ! -d "\$dir" ]; then
  exit 1
fi
command=\$dir/bin/$script.sh
echo \$command
if which bash; then
  nohup bash -c "[ -r '$HOME/.bashrc' ] && source '$HOME/.bashrc'; exec '\$command'" > /dev/null 2> /dev/null &
else
  nohup \$command > /dev/null 2> /dev/null &
fi
SH

  chmod 700 "$HOME/.local/bin/$script"
  cat <<DESKTOP >"$HOME/.local/share/applications/shrc-$script.desktop"
[Desktop Entry]
Version=1.0
Type=Application
Name=$title
Comment=$title
Exec=$HOME/.local/bin/$script
Icon=$dir/bin/$script.png
Terminal=false
Categories=Development;IDE;
DESKTOP
)

shrc_update_desktop() (
  mkdir -p ~/.local/bin ~/.local/share/applications

  shrc_setup_intellij_variant idea-IC idea 'IntelliJ IDEA Community'
  shrc_setup_intellij_variant clion clion CLion
  shrc_setup_intellij_variant pycharm-community pycharm PyCharm
)

shrc_update_xenv() (
  set -eux
  for dir in ~/.rbenv ~/.rbenv/plugins/ruby-build ~/.nodenv ~/.nodenv/plugins/node-build; do
    if [ -d $dir/.git ]; then
      cd $dir
      git fetch --prune
      git reset --hard origin/master
    fi
  done
)

shrc_update_go() (
  set -eux
  go get -u github.com/nsf/gocode
  go get -u github.com/rogpeppe/godef
  go get -u github.com/golang/lint/golint
  go get -u github.com/kisielk/errcheck
)

shrc_update_rust() (
  set -eux

  if ! command_exists rustup; then
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none --no-modify-path --verbose
    shrc_pathmunge "$HOME/.cargo/bin"
  fi

  rustup self update
  rustup update

  for toolchain in stable beta nightly $(cat rust-toolchain 2>/dev/null); do
    rustup install "$toolchain"
    rustup component add "--toolchain=$toolchain" rustfmt rls rust-analysis rust-src clippy
  done

  if ! racer --version; then
    cargo +nightly install racer
  fi

  if ! cargo +stable outdated --version; then
    cargo +stable install cargo-outdated
  fi
)

shrc_update_emacs() (
  set -eux
  emacs --batch --eval "(progn (load \"~/.emacs\")(require 'package)(package-initialize)(package-refresh-contents))"
  for package in \
    company-go \
    company-quickhelp \
    racer \
    flycheck-rust \
    rust-mode \
    intero; do
    emacs --batch --eval "(progn (load \"~/.emacs\")(require 'package)(package-initialize)(package-install '$package))"
  done
)

shrc_config_gnome() (
  if command_exists gsettings; then
    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'jp')]"
    gsettings set org.gnome.desktop.input-sources sources "[('ibus', 'mozc-jp')]"
    gsettings set org.gnome.desktop.wm.keybindings switch-group "['disabled']"
  fi
)

eclipse() (
  # https://bugs.eclipse.org/bugs/show_bug.cgi?id=491855
  # export SWT_GTK=0
  shrc_nohup ~/.local/eclipse/eclipse
)

shrc_start
